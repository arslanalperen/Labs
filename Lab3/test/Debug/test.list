
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000034c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000408  08000408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000420  08000420  00010420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000424  08000424  00010424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000000  08000428  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000020  08000428  00020020  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00010428  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000a5d  00000000  00000000  00010450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000002ee  00000000  00000000  00010ead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0000027b  00000000  00000000  0001119b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000000a8  00000000  00000000  00011418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000000d0  00000000  00000000  000114c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00000a3f  00000000  00000000  00011590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0000045a  00000000  00000000  00011fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00012429  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000120  00000000  00000000  0001247c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080003f0 	.word	0x080003f0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	080003f0 	.word	0x080003f0

08000104 <Toggle2s>:
	GPIOB->ODR |= (1U << 4);
}

void Toggle2s(){
	int value;
	delay(WHILEDELAY);
 8000104:	4b0f      	ldr	r3, [pc, #60]	; (8000144 <Toggle2s+0x40>)
		delay(DOTONELEDDELAY);
	}
}

void delay(volatile uint32_t s) {
    for(; s>0; s--);
 8000106:	3b01      	subs	r3, #1
 8000108:	2b00      	cmp	r3, #0
 800010a:	d1fc      	bne.n	8000106 <Toggle2s+0x2>
		value = GPIOB->IDR &= (1U << 5);
 800010c:	4a0e      	ldr	r2, [pc, #56]	; (8000148 <Toggle2s+0x44>)
 800010e:	3320      	adds	r3, #32
 8000110:	6911      	ldr	r1, [r2, #16]
 8000112:	400b      	ands	r3, r1
 8000114:	6113      	str	r3, [r2, #16]
		if(value == 0x20)
 8000116:	d113      	bne.n	8000140 <Toggle2s+0x3c>
		GPIOB->ODR |= (1U << 4);
 8000118:	2110      	movs	r1, #16
		value = GPIOB->IDR &= (1U << 5);
 800011a:	2020      	movs	r0, #32
		GPIOB->ODR |= (1U << 4);
 800011c:	6953      	ldr	r3, [r2, #20]
 800011e:	430b      	orrs	r3, r1
 8000120:	6153      	str	r3, [r2, #20]
		delay(TWOSLEDDELAY);
 8000122:	4b0a      	ldr	r3, [pc, #40]	; (800014c <Toggle2s+0x48>)
    for(; s>0; s--);
 8000124:	3b01      	subs	r3, #1
 8000126:	2b00      	cmp	r3, #0
 8000128:	d1fc      	bne.n	8000124 <Toggle2s+0x20>
		GPIOB->ODR &= ~(1U << 4);
 800012a:	6953      	ldr	r3, [r2, #20]
 800012c:	438b      	bics	r3, r1
 800012e:	6153      	str	r3, [r2, #20]
		delay(TWOSLEDDELAY);
 8000130:	4b06      	ldr	r3, [pc, #24]	; (800014c <Toggle2s+0x48>)
    for(; s>0; s--);
 8000132:	3b01      	subs	r3, #1
 8000134:	2b00      	cmp	r3, #0
 8000136:	d1fc      	bne.n	8000132 <Toggle2s+0x2e>
		value = GPIOB->IDR &= (1U << 5);
 8000138:	6913      	ldr	r3, [r2, #16]
 800013a:	4003      	ands	r3, r0
 800013c:	6113      	str	r3, [r2, #16]
		if(value == 0x20)
 800013e:	d0ed      	beq.n	800011c <Toggle2s+0x18>
}
 8000140:	4770      	bx	lr
 8000142:	46c0      	nop			; (mov r8, r8)
 8000144:	000927c0 	.word	0x000927c0
 8000148:	50000400 	.word	0x50000400
 800014c:	0030d400 	.word	0x0030d400

08000150 <Toggle1s>:
	delay(WHILEDELAY);
 8000150:	4b0f      	ldr	r3, [pc, #60]	; (8000190 <Toggle1s+0x40>)
    for(; s>0; s--);
 8000152:	3b01      	subs	r3, #1
 8000154:	2b00      	cmp	r3, #0
 8000156:	d1fc      	bne.n	8000152 <Toggle1s+0x2>
		value = GPIOB->IDR &= (1U << 5);
 8000158:	4a0e      	ldr	r2, [pc, #56]	; (8000194 <Toggle1s+0x44>)
 800015a:	3320      	adds	r3, #32
 800015c:	6911      	ldr	r1, [r2, #16]
 800015e:	400b      	ands	r3, r1
 8000160:	6113      	str	r3, [r2, #16]
		if(value == 0x20)
 8000162:	d113      	bne.n	800018c <Toggle1s+0x3c>
		GPIOB->ODR |= (1U << 4);
 8000164:	2110      	movs	r1, #16
		value = GPIOB->IDR &= (1U << 5);
 8000166:	2020      	movs	r0, #32
		GPIOB->ODR |= (1U << 4);
 8000168:	6953      	ldr	r3, [r2, #20]
 800016a:	430b      	orrs	r3, r1
 800016c:	6153      	str	r3, [r2, #20]
		delay(ONESLEDDELAY);
 800016e:	4b0a      	ldr	r3, [pc, #40]	; (8000198 <Toggle1s+0x48>)
    for(; s>0; s--);
 8000170:	3b01      	subs	r3, #1
 8000172:	2b00      	cmp	r3, #0
 8000174:	d1fc      	bne.n	8000170 <Toggle1s+0x20>
		GPIOB->ODR &= ~(1U << 4);
 8000176:	6953      	ldr	r3, [r2, #20]
 8000178:	438b      	bics	r3, r1
 800017a:	6153      	str	r3, [r2, #20]
		delay(ONESLEDDELAY);
 800017c:	4b06      	ldr	r3, [pc, #24]	; (8000198 <Toggle1s+0x48>)
    for(; s>0; s--);
 800017e:	3b01      	subs	r3, #1
 8000180:	2b00      	cmp	r3, #0
 8000182:	d1fc      	bne.n	800017e <Toggle1s+0x2e>
		value = GPIOB->IDR &= (1U << 5);
 8000184:	6913      	ldr	r3, [r2, #16]
 8000186:	4003      	ands	r3, r0
 8000188:	6113      	str	r3, [r2, #16]
		if(value == 0x20)
 800018a:	d0ed      	beq.n	8000168 <Toggle1s+0x18>
}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			; (mov r8, r8)
 8000190:	000927c0 	.word	0x000927c0
 8000194:	50000400 	.word	0x50000400
 8000198:	00186a00 	.word	0x00186a00

0800019c <Toggle05s>:
	delay(WHILEDELAY);
 800019c:	4b0f      	ldr	r3, [pc, #60]	; (80001dc <Toggle05s+0x40>)
    for(; s>0; s--);
 800019e:	3b01      	subs	r3, #1
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d1fc      	bne.n	800019e <Toggle05s+0x2>
		value = GPIOB->IDR &= (1U << 5);
 80001a4:	4a0e      	ldr	r2, [pc, #56]	; (80001e0 <Toggle05s+0x44>)
 80001a6:	3320      	adds	r3, #32
 80001a8:	6911      	ldr	r1, [r2, #16]
 80001aa:	400b      	ands	r3, r1
 80001ac:	6113      	str	r3, [r2, #16]
		if(value == 0x20)
 80001ae:	d113      	bne.n	80001d8 <Toggle05s+0x3c>
		GPIOB->ODR |= (1U << 4);
 80001b0:	2110      	movs	r1, #16
		value = GPIOB->IDR &= (1U << 5);
 80001b2:	2020      	movs	r0, #32
		GPIOB->ODR |= (1U << 4);
 80001b4:	6953      	ldr	r3, [r2, #20]
 80001b6:	430b      	orrs	r3, r1
 80001b8:	6153      	str	r3, [r2, #20]
		delay(DOTFIVELEDDELAY);
 80001ba:	4b0a      	ldr	r3, [pc, #40]	; (80001e4 <Toggle05s+0x48>)
    for(; s>0; s--);
 80001bc:	3b01      	subs	r3, #1
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d1fc      	bne.n	80001bc <Toggle05s+0x20>
		GPIOB->ODR &= ~(1U << 4);
 80001c2:	6953      	ldr	r3, [r2, #20]
 80001c4:	438b      	bics	r3, r1
 80001c6:	6153      	str	r3, [r2, #20]
		delay(DOTFIVELEDDELAY);
 80001c8:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <Toggle05s+0x48>)
    for(; s>0; s--);
 80001ca:	3b01      	subs	r3, #1
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d1fc      	bne.n	80001ca <Toggle05s+0x2e>
		value = GPIOB->IDR &= (1U << 5);
 80001d0:	6913      	ldr	r3, [r2, #16]
 80001d2:	4003      	ands	r3, r0
 80001d4:	6113      	str	r3, [r2, #16]
		if(value == 0x20)
 80001d6:	d0ed      	beq.n	80001b4 <Toggle05s+0x18>
}
 80001d8:	4770      	bx	lr
 80001da:	46c0      	nop			; (mov r8, r8)
 80001dc:	000927c0 	.word	0x000927c0
 80001e0:	50000400 	.word	0x50000400
 80001e4:	000c3500 	.word	0x000c3500

080001e8 <Toggle01s>:
	delay(WHILEDELAY);
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <Toggle01s+0x40>)
    for(; s>0; s--);
 80001ea:	3b01      	subs	r3, #1
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d1fc      	bne.n	80001ea <Toggle01s+0x2>
		value = GPIOB->IDR &= (1U << 5);
 80001f0:	4a0e      	ldr	r2, [pc, #56]	; (800022c <Toggle01s+0x44>)
 80001f2:	3320      	adds	r3, #32
 80001f4:	6911      	ldr	r1, [r2, #16]
 80001f6:	400b      	ands	r3, r1
 80001f8:	6113      	str	r3, [r2, #16]
		if(value == 0x20)
 80001fa:	d113      	bne.n	8000224 <Toggle01s+0x3c>
		GPIOB->ODR |= (1U << 4);
 80001fc:	2110      	movs	r1, #16
		value = GPIOB->IDR &= (1U << 5);
 80001fe:	2020      	movs	r0, #32
		GPIOB->ODR |= (1U << 4);
 8000200:	6953      	ldr	r3, [r2, #20]
 8000202:	430b      	orrs	r3, r1
 8000204:	6153      	str	r3, [r2, #20]
		delay(DOTONELEDDELAY);
 8000206:	4b0a      	ldr	r3, [pc, #40]	; (8000230 <Toggle01s+0x48>)
    for(; s>0; s--);
 8000208:	3b01      	subs	r3, #1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d1fc      	bne.n	8000208 <Toggle01s+0x20>
		GPIOB->ODR &= ~(1U << 4);
 800020e:	6953      	ldr	r3, [r2, #20]
 8000210:	438b      	bics	r3, r1
 8000212:	6153      	str	r3, [r2, #20]
		delay(DOTONELEDDELAY);
 8000214:	4b06      	ldr	r3, [pc, #24]	; (8000230 <Toggle01s+0x48>)
    for(; s>0; s--);
 8000216:	3b01      	subs	r3, #1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d1fc      	bne.n	8000216 <Toggle01s+0x2e>
		value = GPIOB->IDR &= (1U << 5);
 800021c:	6913      	ldr	r3, [r2, #16]
 800021e:	4003      	ands	r3, r0
 8000220:	6113      	str	r3, [r2, #16]
		if(value == 0x20)
 8000222:	d0ed      	beq.n	8000200 <Toggle01s+0x18>
}
 8000224:	4770      	bx	lr
 8000226:	46c0      	nop			; (mov r8, r8)
 8000228:	000927c0 	.word	0x000927c0
 800022c:	50000400 	.word	0x50000400
 8000230:	00027100 	.word	0x00027100

08000234 <main>:
    RCC->IOPENR |= (1U << 1);
 8000234:	2102      	movs	r1, #2
int main(void) {
 8000236:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000238:	46c6      	mov	lr, r8
    RCC->IOPENR |= (1U << 1);
 800023a:	4a37      	ldr	r2, [pc, #220]	; (8000318 <main+0xe4>)
    GPIOB->MODER &= ~(3U << 2*4);
 800023c:	4c37      	ldr	r4, [pc, #220]	; (800031c <main+0xe8>)
    RCC->IOPENR |= (1U << 1);
 800023e:	6b53      	ldr	r3, [r2, #52]	; 0x34
int main(void) {
 8000240:	b500      	push	{lr}
    RCC->IOPENR |= (1U << 1);
 8000242:	430b      	orrs	r3, r1
 8000244:	6353      	str	r3, [r2, #52]	; 0x34
    GPIOB->MODER &= ~(3U << 2*4);
 8000246:	6823      	ldr	r3, [r4, #0]
 8000248:	4a35      	ldr	r2, [pc, #212]	; (8000320 <main+0xec>)
    int value = GPIOB->IDR &= (1U << 5);
 800024a:	2520      	movs	r5, #32
    GPIOB->MODER &= ~(3U << 2*4);
 800024c:	4013      	ands	r3, r2
 800024e:	6023      	str	r3, [r4, #0]
    GPIOB->MODER |= (1U << 2*4);
 8000250:	2380      	movs	r3, #128	; 0x80
 8000252:	6822      	ldr	r2, [r4, #0]
 8000254:	005b      	lsls	r3, r3, #1
 8000256:	4313      	orrs	r3, r2
 8000258:	6023      	str	r3, [r4, #0]
    GPIOB->MODER &= ~(3U << 2*9);
 800025a:	6823      	ldr	r3, [r4, #0]
 800025c:	4a31      	ldr	r2, [pc, #196]	; (8000324 <main+0xf0>)
 800025e:	4f32      	ldr	r7, [pc, #200]	; (8000328 <main+0xf4>)
 8000260:	4013      	ands	r3, r2
 8000262:	6023      	str	r3, [r4, #0]
    GPIOB->MODER |= (1U << 2*9);
 8000264:	2380      	movs	r3, #128	; 0x80
 8000266:	6822      	ldr	r2, [r4, #0]
 8000268:	02db      	lsls	r3, r3, #11
 800026a:	4313      	orrs	r3, r2
 800026c:	6023      	str	r3, [r4, #0]
    GPIOB->MODER &= ~(3U << 2*5);
 800026e:	6823      	ldr	r3, [r4, #0]
 8000270:	4a2e      	ldr	r2, [pc, #184]	; (800032c <main+0xf8>)
    GPIOB->ODR &= ~(1U << 9);
 8000272:	4e2f      	ldr	r6, [pc, #188]	; (8000330 <main+0xfc>)
    GPIOB->MODER &= ~(3U << 2*5);
 8000274:	4013      	ands	r3, r2
 8000276:	6023      	str	r3, [r4, #0]
 8000278:	4b2e      	ldr	r3, [pc, #184]	; (8000334 <main+0x100>)
 800027a:	4698      	mov	r8, r3
    GPIOB->ODR &= ~(1U << 9);
 800027c:	6963      	ldr	r3, [r4, #20]
 800027e:	4033      	ands	r3, r6
 8000280:	6163      	str	r3, [r4, #20]
    int value = GPIOB->IDR &= (1U << 5);
 8000282:	6923      	ldr	r3, [r4, #16]
 8000284:	402b      	ands	r3, r5
 8000286:	6123      	str	r3, [r4, #16]
    if (value == 0x20){
 8000288:	d00f      	beq.n	80002aa <main+0x76>
    	switch(counter){
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	2b05      	cmp	r3, #5
 800028e:	d80c      	bhi.n	80002aa <main+0x76>
 8000290:	4642      	mov	r2, r8
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	58d3      	ldr	r3, [r2, r3]
    			GPIOB->ODR |= (1U << 9);
 8000296:	6962      	ldr	r2, [r4, #20]
 8000298:	469f      	mov	pc, r3
    			GPIOB->ODR |= (1U << 9);
 800029a:	2380      	movs	r3, #128	; 0x80
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	4313      	orrs	r3, r2
 80002a0:	6163      	str	r3, [r4, #20]
    			counter ++;
 80002a2:	2305      	movs	r3, #5
 80002a4:	603b      	str	r3, [r7, #0]
    		    Toggle05s();
 80002a6:	f7ff ff79 	bl	800019c <Toggle05s>
    delay(WHILEDELAY);
 80002aa:	4b23      	ldr	r3, [pc, #140]	; (8000338 <main+0x104>)
    for(; s>0; s--);
 80002ac:	3b01      	subs	r3, #1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d1fc      	bne.n	80002ac <main+0x78>
 80002b2:	e7e3      	b.n	800027c <main+0x48>
    			GPIOB->ODR |= (1U << 9);
 80002b4:	2380      	movs	r3, #128	; 0x80
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	4313      	orrs	r3, r2
 80002ba:	6163      	str	r3, [r4, #20]
    		    counter ++;
 80002bc:	2304      	movs	r3, #4
 80002be:	603b      	str	r3, [r7, #0]
    		    Toggle1s();
 80002c0:	f7ff ff46 	bl	8000150 <Toggle1s>
    		    break;
 80002c4:	e7f1      	b.n	80002aa <main+0x76>
    			GPIOB->ODR |= (1U << 9);
 80002c6:	2380      	movs	r3, #128	; 0x80
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	4313      	orrs	r3, r2
 80002cc:	6163      	str	r3, [r4, #20]
    			counter ++;
 80002ce:	2303      	movs	r3, #3
 80002d0:	603b      	str	r3, [r7, #0]
    			Toggle2s();
 80002d2:	f7ff ff17 	bl	8000104 <Toggle2s>
    		    break;
 80002d6:	e7e8      	b.n	80002aa <main+0x76>
    			GPIOB->ODR |= (1U << 9);
 80002d8:	2380      	movs	r3, #128	; 0x80
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	4313      	orrs	r3, r2
 80002de:	6163      	str	r3, [r4, #20]
    			counter ++;
 80002e0:	2302      	movs	r3, #2
	GPIOB->ODR &= ~(1U << 4);
 80002e2:	2210      	movs	r2, #16
    			counter ++;
 80002e4:	603b      	str	r3, [r7, #0]
	GPIOB->ODR &= ~(1U << 4);
 80002e6:	6963      	ldr	r3, [r4, #20]
 80002e8:	4393      	bics	r3, r2
 80002ea:	6163      	str	r3, [r4, #20]
}
 80002ec:	e7dd      	b.n	80002aa <main+0x76>
    			GPIOB->ODR |= (1U << 9);
 80002ee:	2380      	movs	r3, #128	; 0x80
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	4313      	orrs	r3, r2
 80002f4:	6163      	str	r3, [r4, #20]
    			counter ++;
 80002f6:	2301      	movs	r3, #1
	GPIOB->ODR |= (1U << 4);
 80002f8:	2210      	movs	r2, #16
    			counter ++;
 80002fa:	603b      	str	r3, [r7, #0]
	GPIOB->ODR |= (1U << 4);
 80002fc:	6963      	ldr	r3, [r4, #20]
 80002fe:	4313      	orrs	r3, r2
 8000300:	6163      	str	r3, [r4, #20]
}
 8000302:	e7d2      	b.n	80002aa <main+0x76>
    			GPIOB->ODR |= (1U << 9);
 8000304:	2380      	movs	r3, #128	; 0x80
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	4313      	orrs	r3, r2
 800030a:	6163      	str	r3, [r4, #20]
    		    counter = 0;
 800030c:	2300      	movs	r3, #0
 800030e:	603b      	str	r3, [r7, #0]
    		    Toggle01s();
 8000310:	f7ff ff6a 	bl	80001e8 <Toggle01s>
    		    break;
 8000314:	e7c9      	b.n	80002aa <main+0x76>
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	40021000 	.word	0x40021000
 800031c:	50000400 	.word	0x50000400
 8000320:	fffffcff 	.word	0xfffffcff
 8000324:	fff3ffff 	.word	0xfff3ffff
 8000328:	2000001c 	.word	0x2000001c
 800032c:	fffff3ff 	.word	0xfffff3ff
 8000330:	fffffdff 	.word	0xfffffdff
 8000334:	08000408 	.word	0x08000408
 8000338:	000927c0 	.word	0x000927c0

0800033c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800033c:	480d      	ldr	r0, [pc, #52]	; (8000374 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000340:	f000 f826 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000344:	480c      	ldr	r0, [pc, #48]	; (8000378 <LoopForever+0x6>)
  ldr r1, =_edata
 8000346:	490d      	ldr	r1, [pc, #52]	; (800037c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000348:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <LoopForever+0xe>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800034c:	e002      	b.n	8000354 <LoopCopyDataInit>

0800034e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000352:	3304      	adds	r3, #4

08000354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000358:	d3f9      	bcc.n	800034e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035a:	4a0a      	ldr	r2, [pc, #40]	; (8000384 <LoopForever+0x12>)
  ldr r4, =_ebss
 800035c:	4c0a      	ldr	r4, [pc, #40]	; (8000388 <LoopForever+0x16>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000360:	e001      	b.n	8000366 <LoopFillZerobss>

08000362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000364:	3204      	adds	r2, #4

08000366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000368:	d3fb      	bcc.n	8000362 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800036a:	f000 f81d 	bl	80003a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036e:	f7ff ff61 	bl	8000234 <main>

08000372 <LoopForever>:

LoopForever:
    b LoopForever
 8000372:	e7fe      	b.n	8000372 <LoopForever>
  ldr   r0, =_estack
 8000374:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800037c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000380:	08000428 	.word	0x08000428
  ldr r2, =_sbss
 8000384:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000388:	20000020 	.word	0x20000020

0800038c <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800038c:	e7fe      	b.n	800038c <ADC_COMP_IRQHandler>
	...

08000390 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000394:	4b03      	ldr	r3, [pc, #12]	; (80003a4 <SystemInit+0x14>)
 8000396:	2280      	movs	r2, #128	; 0x80
 8000398:	0512      	lsls	r2, r2, #20
 800039a:	609a      	str	r2, [r3, #8]
#endif
}
 800039c:	46c0      	nop			; (mov r8, r8)
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	e000ed00 	.word	0xe000ed00

080003a8 <__libc_init_array>:
 80003a8:	b570      	push	{r4, r5, r6, lr}
 80003aa:	2600      	movs	r6, #0
 80003ac:	4d0c      	ldr	r5, [pc, #48]	; (80003e0 <__libc_init_array+0x38>)
 80003ae:	4c0d      	ldr	r4, [pc, #52]	; (80003e4 <__libc_init_array+0x3c>)
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	10a4      	asrs	r4, r4, #2
 80003b4:	42a6      	cmp	r6, r4
 80003b6:	d109      	bne.n	80003cc <__libc_init_array+0x24>
 80003b8:	2600      	movs	r6, #0
 80003ba:	f000 f819 	bl	80003f0 <_init>
 80003be:	4d0a      	ldr	r5, [pc, #40]	; (80003e8 <__libc_init_array+0x40>)
 80003c0:	4c0a      	ldr	r4, [pc, #40]	; (80003ec <__libc_init_array+0x44>)
 80003c2:	1b64      	subs	r4, r4, r5
 80003c4:	10a4      	asrs	r4, r4, #2
 80003c6:	42a6      	cmp	r6, r4
 80003c8:	d105      	bne.n	80003d6 <__libc_init_array+0x2e>
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	00b3      	lsls	r3, r6, #2
 80003ce:	58eb      	ldr	r3, [r5, r3]
 80003d0:	4798      	blx	r3
 80003d2:	3601      	adds	r6, #1
 80003d4:	e7ee      	b.n	80003b4 <__libc_init_array+0xc>
 80003d6:	00b3      	lsls	r3, r6, #2
 80003d8:	58eb      	ldr	r3, [r5, r3]
 80003da:	4798      	blx	r3
 80003dc:	3601      	adds	r6, #1
 80003de:	e7f2      	b.n	80003c6 <__libc_init_array+0x1e>
 80003e0:	08000420 	.word	0x08000420
 80003e4:	08000420 	.word	0x08000420
 80003e8:	08000420 	.word	0x08000420
 80003ec:	08000424 	.word	0x08000424

080003f0 <_init>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr

080003fc <_fini>:
 80003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000402:	bc08      	pop	{r3}
 8000404:	469e      	mov	lr, r3
 8000406:	4770      	bx	lr
