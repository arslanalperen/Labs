
 // Q4.s
 // Author: Alperen Arslan
 //

.syntax unified
.cpu cortex-m0plus
.fpu softvfp
.thumb


// make linker see this
.global Reset_Handler

// get these from linker script
.word _sdata
.word _edata
.word _sbss
.word _ebss


// define clock base and enable addresses
.equ RCC_BASE,         (0x40021000)          // RCC base address
.equ RCC_IOPENR,       (RCC_BASE   + (0x34)) // RCC IOPENR register offset

// define GPIO Base, Moder and ODR pin addresses
.equ GPIOA_BASE,       (0x50000000)          // GPIOA base address
.equ GPIOA_MODER,      (GPIOA_BASE + (0x00)) // GPIOA MODER register offset
.equ GPIOA_IDR,        (GPIOA_BASE + (0x10)) // GPIOA IDR register offset

// vector table, +1 thumb mode
.section .vectors
vector_table:
	.word _estack             //     Stack pointer
	.word Reset_Handler +1    //     Reset handler
	.word Default_Handler +1  //       NMI handler
	.word Default_Handler +1  // HardFault handler
	// add rest of them here if needed


// reset handler
.section .text
Reset_Handler:
	// set stack pointer
	ldr r0, =_estack
	mov sp, r0

	// initialize data and bss
	// not necessary for rom only code

	bl init_data
	// call main
	bl main
	// trap if returned
	b .


// initialize data and bss sections
.section .text
init_data:

	// copy rom to ram
	ldr r0, =_sdata
	ldr r1, =_edata
	ldr r2, =_sidata
	movs r3, #0
	b LoopCopyDataInit

	CopyDataInit:
		ldr r4, [r2, r3]
		str r4, [r0, r3]
		adds r3, r3, #4

	LoopCopyDataInit:
		adds r4, r0, r3
		cmp r4, r1
		bcc CopyDataInit

	// zero bss
	ldr r2, =_sbss
	ldr r4, =_ebss
	movs r3, #0
	b LoopFillZerobss

	FillZerobss:
		str  r3, [r2]
		adds r2, r2, #4

	LoopFillZerobss:
		cmp r2, r4
		bcc FillZerobss

	bx lr


// default handler
.section .text
Default_Handler:
	b Default_Handler


// main function
.section .text
main:
	// enable GPIOA clock, bit2 on IOPENR
	ldr r6, =RCC_IOPENR
	ldr r5, [r6]
	// movs expects imm8, so this should be fine
	movs r4, 0x1
	orrs r5, r5, r4
	str r5, [r6]

	// setup PA0 and PA11 for button and led 00 and 01 in MODER
	ldr r6, =GPIOA_MODER
	ldr r5, [r6]
	// cannot do with movs, so use pc relative
	ldr r4, =[0xC00003]
	bics r5, r5, r4
	ldr r4, =[0x7FFFFC]
	orrs r5, r5, r4
	str r5, [r6]

	// turn on led connected PA11 if button is pressed
loop:
	ldr r6, = GPIOA_ODR
	ldr r7, = GPIOA_IDR
	ldr r5, [r6]
	ldr r4, [r7]

	cmp r4, 0x266
	jl Less
	movs r5, 0x1
	lsls r5, r5, #10
	movs r4, 0x1
	jmp Both
	Less:
	movs r5, 0x0
	lsls r5, r5 #10
	movs r4, 0x0
	Both:
	str r5, [r6]
	str r4, [r7]

	b loop

	/* this should never get executed */
	nop
