
Q2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .init         00000004  080000cc  080000cc  000100cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fini         00000004  080000d0  080000d0  000100d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000000  20000000  20000000  000100d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000000  20000000  20000000  00000000  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000100d4  2**0
                  CONTENTS, READONLY
  6 .debug_line   00000088  00000000  00000000  000100fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00000026  00000000  00000000  00010184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000014  00000000  00000000  000101aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000020  00000000  00000000  000101c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00000047  00000000  00000000  000101e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <vector_table>:
 8000000:	20002000 	.word	0x20002000
 8000004:	08000021 	.word	0x08000021
 8000008:	08000057 	.word	0x08000057
 800000c:	08000057 	.word	0x08000057
 8000010:	20000000 	.word	0x20000000
 8000014:	20000000 	.word	0x20000000
 8000018:	20000000 	.word	0x20000000
 800001c:	20000000 	.word	0x20000000

08000020 <Reset_Handler>:

// reset handler
.section .text
Reset_Handler:
	// set stack pointer
	ldr r0, =_estack
 8000020:	4820      	ldr	r0, [pc, #128]	; (80000a4 <delay+0xa>)
	mov sp, r0
 8000022:	4685      	mov	sp, r0

	// initialize data and bss
	// not necessary for rom only code

	bl init_data
 8000024:	f000 f803 	bl	800002e <init_data>
	// call main
	bl main
 8000028:	f000 f816 	bl	8000058 <main>
	// trap if returned
	b .
 800002c:	e7fe      	b.n	800002c <Reset_Handler+0xc>

0800002e <init_data>:
// initialize data and bss sections
.section .text
init_data:

	// copy rom to ram
	ldr r0, =_sdata
 800002e:	481e      	ldr	r0, [pc, #120]	; (80000a8 <delay+0xe>)
	ldr r1, =_edata
 8000030:	491e      	ldr	r1, [pc, #120]	; (80000ac <delay+0x12>)
	ldr r2, =_sidata
 8000032:	4a1f      	ldr	r2, [pc, #124]	; (80000b0 <delay+0x16>)
	movs r3, #0
 8000034:	2300      	movs	r3, #0
	b LoopCopyDataInit
 8000036:	e002      	b.n	800003e <LoopCopyDataInit>

08000038 <CopyDataInit>:

	CopyDataInit:
		ldr r4, [r2, r3]
 8000038:	58d4      	ldr	r4, [r2, r3]
		str r4, [r0, r3]
 800003a:	50c4      	str	r4, [r0, r3]
		adds r3, r3, #4
 800003c:	3304      	adds	r3, #4

0800003e <LoopCopyDataInit>:

	LoopCopyDataInit:
		adds r4, r0, r3
 800003e:	18c4      	adds	r4, r0, r3
		cmp r4, r1
 8000040:	428c      	cmp	r4, r1
		bcc CopyDataInit
 8000042:	d3f9      	bcc.n	8000038 <CopyDataInit>

	// zero bss
	ldr r2, =_sbss
 8000044:	4a1b      	ldr	r2, [pc, #108]	; (80000b4 <delay+0x1a>)
	ldr r4, =_ebss
 8000046:	4c1c      	ldr	r4, [pc, #112]	; (80000b8 <delay+0x1e>)
	movs r3, #0
 8000048:	2300      	movs	r3, #0
	b LoopFillZerobss
 800004a:	e001      	b.n	8000050 <LoopFillZerobss>

0800004c <FillZerobss>:

	FillZerobss:
		str  r3, [r2]
 800004c:	6013      	str	r3, [r2, #0]
		adds r2, r2, #4
 800004e:	3204      	adds	r2, #4

08000050 <LoopFillZerobss>:

	LoopFillZerobss:
		cmp r2, r4
 8000050:	42a2      	cmp	r2, r4
		bcc FillZerobss
 8000052:	d3fb      	bcc.n	800004c <FillZerobss>

	bx lr
 8000054:	4770      	bx	lr

08000056 <Default_Handler>:

// default handler
.section .text
Default_Handler:
	b Default_Handler
 8000056:	e7fe      	b.n	8000056 <Default_Handler>

08000058 <main>:

// main function
.section .text
main:
	// enable GPIOB clock, bit2 on IOPENR
	ldr r6, =RCC_IOPENR
 8000058:	4e18      	ldr	r6, [pc, #96]	; (80000bc <delay+0x22>)
	ldr r5, [r6]
 800005a:	6835      	ldr	r5, [r6, #0]
	// movs expects imm8, so this should be fine
	movs r4, 0x2
 800005c:	2402      	movs	r4, #2
	orrs r5, r5, r4
 800005e:	4325      	orrs	r5, r4
	str r5, [r6]
 8000060:	6035      	str	r5, [r6, #0]

	// setup PB4 for led 01 for in MODER
	ldr r6, =GPIOB_MODER
 8000062:	4e17      	ldr	r6, [pc, #92]	; (80000c0 <delay+0x26>)
	ldr r5, [r6]
 8000064:	6835      	ldr	r5, [r6, #0]
	// cannot do with movs, so use pc relative
	movs r4, 0x3
 8000066:	2403      	movs	r4, #3
	lsls r4, r4, #8
 8000068:	0224      	lsls	r4, r4, #8
	bics r5, r5, r4
 800006a:	43a5      	bics	r5, r4
	movs r4, 0x1
 800006c:	2401      	movs	r4, #1
	lsls r4, r4, #8
 800006e:	0224      	lsls	r4, r4, #8
	orrs r5, r5, r4
 8000070:	4325      	orrs	r5, r4
	str r5, [r6]
 8000072:	6035      	str	r5, [r6, #0]

08000074 <loop>:

// Create a loop for toggle led
loop:
	// turn on led connected to PB4 in ODR
	ldr r6, =GPIOB_ODR
 8000074:	4e13      	ldr	r6, [pc, #76]	; (80000c4 <delay+0x2a>)
	ldr r5, [r6]
 8000076:	6835      	ldr	r5, [r6, #0]
	movs r4, 0x1
 8000078:	2401      	movs	r4, #1
	lsls r4, r4, #4
 800007a:	0124      	lsls	r4, r4, #4
	orrs r5, r5, r4
 800007c:	4325      	orrs	r5, r4
	str r5, [r6]
 800007e:	6035      	str	r5, [r6, #0]

	// Assign value to register r1 to sub 1 per clock
	ldr r1, =#4800000
 8000080:	4911      	ldr	r1, [pc, #68]	; (80000c8 <delay+0x2e>)
	bl delay
 8000082:	f000 f80a 	bl	800009a <delay>

	// turn off led connected to PB4 in ODR
	ldr r6, =GPIOB_ODR
 8000086:	4e0f      	ldr	r6, [pc, #60]	; (80000c4 <delay+0x2a>)
	ldr r5, [r6]
 8000088:	6835      	ldr	r5, [r6, #0]
	movs r4, 0x1
 800008a:	2401      	movs	r4, #1
	lsls r4, r4, #4
 800008c:	0124      	lsls	r4, r4, #4
	bics r5, r5, r4
 800008e:	43a5      	bics	r5, r4
	str r5, [r6]
 8000090:	6035      	str	r5, [r6, #0]

	// Assign value to register r1 to sub 1 per clock
	ldr r1, =#4800000
 8000092:	490d      	ldr	r1, [pc, #52]	; (80000c8 <delay+0x2e>)
	bl delay
 8000094:	f000 f801 	bl	800009a <delay>

	b loop
 8000098:	e7ec      	b.n	8000074 <loop>

0800009a <delay>:

//Create a delay function to sub 1 from r1 register
delay:
	subs r1, r1, #1
 800009a:	3901      	subs	r1, #1
	bne delay
 800009c:	d1fd      	bne.n	800009a <delay>
	bx lr
 800009e:	4770      	bx	lr

	//this should never get executed
	nop
 80000a0:	46c0      	nop			; (mov r8, r8)
 80000a2:	0000      	.short	0x0000
	ldr r0, =_estack
 80000a4:	20002000 	.word	0x20002000
	ldr r0, =_sdata
 80000a8:	20000000 	.word	0x20000000
	ldr r1, =_edata
 80000ac:	20000000 	.word	0x20000000
	ldr r2, =_sidata
 80000b0:	080000d4 	.word	0x080000d4
	ldr r2, =_sbss
 80000b4:	20000000 	.word	0x20000000
	ldr r4, =_ebss
 80000b8:	20000000 	.word	0x20000000
	ldr r6, =RCC_IOPENR
 80000bc:	40021034 	.word	0x40021034
	ldr r6, =GPIOB_MODER
 80000c0:	50000400 	.word	0x50000400
	ldr r6, =GPIOB_ODR
 80000c4:	50000414 	.word	0x50000414
	ldr r1, =#4800000
 80000c8:	00493e00 	.word	0x00493e00

Disassembly of section .init:

080000cc <_init>:
 80000cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80000ce:	46c0      	nop			; (mov r8, r8)

Disassembly of section .fini:

080000d0 <_fini>:
 80000d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80000d2:	46c0      	nop			; (mov r8, r8)
