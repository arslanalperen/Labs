
Q2withPopPush.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000000  08000000  08000000  0001020c  2**0
                  CONTENTS
  1 .text         00000204  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000204  0800020c  0001020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000204  08000204  0001020c  2**0
                  CONTENTS
  4 .ARM          00000000  08000204  08000204  0001020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000204  0800020c  0001020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000204  08000204  00010204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000208  08000208  00010208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800020c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800020c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY
 12 .debug_line   000000f9  00000000  00000000  00010234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00000026  00000000  00000000  0001032d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000014  00000000  00000000  00010353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000020  00000000  00000000  00010368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0000007e  00000000  00000000  00010388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <__do_global_dtors_aux>:
 8000000:	b510      	push	{r4, lr}
 8000002:	4c06      	ldr	r4, [pc, #24]	; (800001c <__do_global_dtors_aux+0x1c>)
 8000004:	7823      	ldrb	r3, [r4, #0]
 8000006:	2b00      	cmp	r3, #0
 8000008:	d107      	bne.n	800001a <__do_global_dtors_aux+0x1a>
 800000a:	4b05      	ldr	r3, [pc, #20]	; (8000020 <__do_global_dtors_aux+0x20>)
 800000c:	2b00      	cmp	r3, #0
 800000e:	d002      	beq.n	8000016 <__do_global_dtors_aux+0x16>
 8000010:	4804      	ldr	r0, [pc, #16]	; (8000024 <__do_global_dtors_aux+0x24>)
 8000012:	e000      	b.n	8000016 <__do_global_dtors_aux+0x16>
 8000014:	bf00      	nop
 8000016:	2301      	movs	r3, #1
 8000018:	7023      	strb	r3, [r4, #0]
 800001a:	bd10      	pop	{r4, pc}
 800001c:	20000000 	.word	0x20000000
 8000020:	00000000 	.word	0x00000000
 8000024:	080001ec 	.word	0x080001ec

08000028 <frame_dummy>:
 8000028:	4b04      	ldr	r3, [pc, #16]	; (800003c <frame_dummy+0x14>)
 800002a:	b510      	push	{r4, lr}
 800002c:	2b00      	cmp	r3, #0
 800002e:	d003      	beq.n	8000038 <frame_dummy+0x10>
 8000030:	4903      	ldr	r1, [pc, #12]	; (8000040 <frame_dummy+0x18>)
 8000032:	4804      	ldr	r0, [pc, #16]	; (8000044 <frame_dummy+0x1c>)
 8000034:	e000      	b.n	8000038 <frame_dummy+0x10>
 8000036:	bf00      	nop
 8000038:	bd10      	pop	{r4, pc}
 800003a:	46c0      	nop			; (mov r8, r8)
 800003c:	00000000 	.word	0x00000000
 8000040:	20000004 	.word	0x20000004
 8000044:	080001ec 	.word	0x080001ec
 8000048:	20000000 	.word	0x20000000
 800004c:	20000000 	.word	0x20000000
 8000050:	20000000 	.word	0x20000000
 8000054:	2000001c 	.word	0x2000001c

08000058 <Reset_Handler>:

// reset handler
.section .text
Reset_Handler:
	// set stack pointer
	ldr r0, =_estack
 8000058:	4849      	ldr	r0, [pc, #292]	; (8000180 <ResetDigit+0xe>)
	mov sp, r0
 800005a:	4685      	mov	sp, r0

	// initialize data and bss
	// not necessary for rom only code

	bl init_data
 800005c:	f000 f803 	bl	8000066 <init_data>
	// call main
	bl main
 8000060:	f000 f816 	bl	8000090 <main>
	// trap if returned
	b .
 8000064:	e7fe      	b.n	8000064 <Reset_Handler+0xc>

08000066 <init_data>:
// initialize data and bss sections
.section .text
init_data:

	// copy rom to ram
	ldr r0, =_sdata
 8000066:	4847      	ldr	r0, [pc, #284]	; (8000184 <ResetDigit+0x12>)
	ldr r1, =_edata
 8000068:	4947      	ldr	r1, [pc, #284]	; (8000188 <ResetDigit+0x16>)
	ldr r2, =_sidata
 800006a:	4a48      	ldr	r2, [pc, #288]	; (800018c <ResetDigit+0x1a>)
	movs r3, #0
 800006c:	2300      	movs	r3, #0
	b LoopCopyDataInit
 800006e:	e002      	b.n	8000076 <LoopCopyDataInit>

08000070 <CopyDataInit>:

	CopyDataInit:
		ldr r4, [r2, r3]
 8000070:	58d4      	ldr	r4, [r2, r3]
		str r4, [r0, r3]
 8000072:	50c4      	str	r4, [r0, r3]
		adds r3, r3, #4
 8000074:	3304      	adds	r3, #4

08000076 <LoopCopyDataInit>:

	LoopCopyDataInit:
		adds r4, r0, r3
 8000076:	18c4      	adds	r4, r0, r3
		cmp r4, r1
 8000078:	428c      	cmp	r4, r1
		bcc CopyDataInit
 800007a:	d3f9      	bcc.n	8000070 <CopyDataInit>

	// zero bss
	ldr r2, =_sbss
 800007c:	4a44      	ldr	r2, [pc, #272]	; (8000190 <ResetDigit+0x1e>)
	ldr r4, =_ebss
 800007e:	4c45      	ldr	r4, [pc, #276]	; (8000194 <ResetDigit+0x22>)
	movs r3, #0
 8000080:	2300      	movs	r3, #0
	b LoopFillZerobss
 8000082:	e001      	b.n	8000088 <LoopFillZerobss>

08000084 <FillZerobss>:

	FillZerobss:
		str  r3, [r2]
 8000084:	6013      	str	r3, [r2, #0]
		adds r2, r2, #4
 8000086:	3204      	adds	r2, #4

08000088 <LoopFillZerobss>:

	LoopFillZerobss:
		cmp r2, r4
 8000088:	42a2      	cmp	r2, r4
		bcc FillZerobss
 800008a:	d3fb      	bcc.n	8000084 <FillZerobss>

	bx lr
 800008c:	4770      	bx	lr

0800008e <Default_Handler>:

// default handler
.section .text
Default_Handler:
	b Default_Handler
 800008e:	e7fe      	b.n	800008e <Default_Handler>

08000090 <main>:

// main function
.section .text
main:
	// enable GPIOB clock, bit1 on IOPENR
	ldr r6, =RCC_IOPENR
 8000090:	4e41      	ldr	r6, [pc, #260]	; (8000198 <ResetDigit+0x26>)
	ldr r5, [r6]
 8000092:	6835      	ldr	r5, [r6, #0]
	// movs expects imm8, so this should be fine
	movs r4, 0x3
 8000094:	2403      	movs	r4, #3
	orrs r5, r5, r4
 8000096:	4325      	orrs	r5, r4
	str r5, [r6]
 8000098:	6035      	str	r5, [r6, #0]

	// setup PA8, PA9, PA10 and PA15 for 01 in MODER
	ldr r6, =GPIOA_MODER
 800009a:	4e40      	ldr	r6, [pc, #256]	; (800019c <ResetDigit+0x2a>)
	ldr r5, [r6]
 800009c:	6835      	ldr	r5, [r6, #0]
	// cannot do with movs, so use pc relative
	ldr r4, =[0x7FD50000] //All PA pins used define output
 800009e:	4c40      	ldr	r4, [pc, #256]	; (80001a0 <ResetDigit+0x2e>)
	ands r5, r5, r4
 80000a0:	4025      	ands	r5, r4
	str r5, [r6]
 80000a2:	6035      	str	r5, [r6, #0]

	// setup PB0, PB1, PB2 ....PB9 for 01 and PB5 for 00 in MODER
	ldr r6, =GPIOB_MODER
 80000a4:	4e3f      	ldr	r6, [pc, #252]	; (80001a4 <ResetDigit+0x32>)
	ldr r5, [r6]
 80000a6:	6835      	ldr	r5, [r6, #0]
	// cannot do with movs, so use pc relative
	ldr r4, =[0x55055] //PB5 pin define input, others used pins define output
 80000a8:	4c3f      	ldr	r4, [pc, #252]	; (80001a8 <ResetDigit+0x36>)
	ands r5, r5, r4
 80000aa:	4025      	ands	r5, r4
	str r5, [r6]
 80000ac:	6035      	str	r5, [r6, #0]

	//D1 Active
	ldr r6, =GPIOA_ODR
 80000ae:	4e3f      	ldr	r6, [pc, #252]	; (80001ac <ResetDigit+0x3a>)
	ldr r5, [r6]
 80000b0:	6835      	ldr	r5, [r6, #0]
	ldr r4, =[0x0700]
 80000b2:	4c3f      	ldr	r4, [pc, #252]	; (80001b0 <ResetDigit+0x3e>)
	orrs r5, r5, r4
 80000b4:	4325      	orrs	r5, r4
	str r5, [r6]
 80000b6:	6035      	str	r5, [r6, #0]

	movs r2, [0x0]
 80000b8:	2200      	movs	r2, #0
	movs r3, [0x0]
 80000ba:	2300      	movs	r3, #0

080000bc <loop>:

	loop:
	ldr r6, = GPIOB_IDR
 80000bc:	4e3d      	ldr	r6, [pc, #244]	; (80001b4 <ResetDigit+0x42>)
	ldr r5, [r6] //For PB5, Pass Button
 80000be:	6835      	ldr	r5, [r6, #0]
	ldr r7, [r6] //For PB4, Countdown button
 80000c0:	6837      	ldr	r7, [r6, #0]
	movs r4, #0x20 //Status switch connected to PB5
 80000c2:	2420      	movs	r4, #32
	ands r5, r5, r4 //Getting the value of button pressed or not
 80000c4:	4025      	ands	r5, r4
	lsrs r5, #5 //Shifting to lsb for compare
 80000c6:	096d      	lsrs	r5, r5, #5
	cmp r5, #0x1 //Compare IDR Value with 1 bit
 80000c8:	2d01      	cmp	r5, #1
	beq changeNumber //If equal
 80000ca:	d000      	beq.n	80000ce <changeNumber>
	ands r7, r7, r4 //Getting the value of button pressed or not
	lsrs r7, #4 //Shifting to lsb for compare
	cmp r7, #0x1 //Compare IDR Value with 1 bit
	beq countdown //If equal
	*/
	b loop
 80000cc:	e7f6      	b.n	80000bc <loop>

080000ce <changeNumber>:

/*------------------------------------*/

	changeNumber:
	push {lr}
 80000ce:	b500      	push	{lr}
	bl Delay
 80000d0:	f000 f816 	bl	8000100 <Delay>
	cmp r2, [0x0]
 80000d4:	2a00      	cmp	r2, #0
	beq FirstNumber
 80000d6:	d004      	beq.n	80000e2 <FirstNumber>
	cmp r2, [0x1]
 80000d8:	2a01      	cmp	r2, #1
	beq SecondNumber
 80000da:	d007      	beq.n	80000ec <SecondNumber>
	cmp r2, [0x2]
 80000dc:	2a02      	cmp	r2, #2
	beq ThirdNumber
 80000de:	d00a      	beq.n	80000f6 <ThirdNumber>
	b loop
 80000e0:	e7ec      	b.n	80000bc <loop>

080000e2 <FirstNumber>:

	FirstNumber:
	movs r3, [0x1]
 80000e2:	2301      	movs	r3, #1
	bl NumberSelect
 80000e4:	f000 f810 	bl	8000108 <NumberSelect>
	movs r2, [0x1]
 80000e8:	2201      	movs	r2, #1
	b loop
 80000ea:	e7e7      	b.n	80000bc <loop>

080000ec <SecondNumber>:

	SecondNumber:
	movs r3, [0x5]
 80000ec:	2305      	movs	r3, #5
	bl NumberSelect
 80000ee:	f000 f80b 	bl	8000108 <NumberSelect>
	movs r2, [0x2]
 80000f2:	2202      	movs	r2, #2
	b loop
 80000f4:	e7e2      	b.n	80000bc <loop>

080000f6 <ThirdNumber>:

	ThirdNumber:
	movs r3, [0x9]
 80000f6:	2309      	movs	r3, #9
	bl NumberSelect
 80000f8:	f000 f806 	bl	8000108 <NumberSelect>
	movs r2, [0x0]
 80000fc:	2200      	movs	r2, #0
	b loop
 80000fe:	e7dd      	b.n	80000bc <loop>

08000100 <Delay>:

/*---------------------------------------------------------*/

	Delay: //Delay for program work slowly
	ldr r1, =delayInterval
 8000100:	492d      	ldr	r1, [pc, #180]	; (80001b8 <ResetDigit+0x46>)

08000102 <delay>:
	delay:
	subs r1, r1, #1
 8000102:	3901      	subs	r1, #1
	bne delay
 8000104:	d1fd      	bne.n	8000102 <delay>
	bx lr
 8000106:	4770      	bx	lr

08000108 <NumberSelect>:

/*----------------------------------------------------------*/

	NumberSelect:
	push {lr}
 8000108:	b500      	push	{lr}
	bl ResetDigit
 800010a:	f000 f832 	bl	8000172 <ResetDigit>
	cmp r3, [0x0] //Control r3 for which number sent to NumberSelect
 800010e:	2b00      	cmp	r3, #0
	beq NumberZero
 8000110:	d012      	beq.n	8000138 <NumberZero>
	cmp r3, [0x1]
 8000112:	2b01      	cmp	r3, #1
	beq NumberOne
 8000114:	d012      	beq.n	800013c <NumberOne>
	cmp r3, [0x2]
 8000116:	2b02      	cmp	r3, #2
	beq NumberTwo
 8000118:	d012      	beq.n	8000140 <NumberTwo>
	cmp r3, [0x3]
 800011a:	2b03      	cmp	r3, #3
	beq NumberThree
 800011c:	d012      	beq.n	8000144 <NumberThree>
	cmp r3, [0x4]
 800011e:	2b04      	cmp	r3, #4
	beq NumberFour
 8000120:	d012      	beq.n	8000148 <NumberFour>
	cmp r3, [0x5]
 8000122:	2b05      	cmp	r3, #5
	beq NumberFive
 8000124:	d012      	beq.n	800014c <NumberFive>
	cmp r3, [0x6]
 8000126:	2b06      	cmp	r3, #6
	beq NumberSix
 8000128:	d012      	beq.n	8000150 <NumberSix>
	cmp r3, [0x7]
 800012a:	2b07      	cmp	r3, #7
	beq NumberSeven
 800012c:	d012      	beq.n	8000154 <NumberSeven>
	cmp r3, [0x8]
 800012e:	2b08      	cmp	r3, #8
	beq NumberEight
 8000130:	d012      	beq.n	8000158 <NumberEight>
	cmp r3, [0x9]
 8000132:	2b09      	cmp	r3, #9
	beq NumberNine
 8000134:	d012      	beq.n	800015c <NumberNine>
	bx lr
 8000136:	4770      	bx	lr

08000138 <NumberZero>:

	NumberZero: //Display the number sent
	ldr r4, =[0x1C7]
 8000138:	4c20      	ldr	r4, [pc, #128]	; (80001bc <ResetDigit+0x4a>)
	b toLedsOn
 800013a:	e011      	b.n	8000160 <toLedsOn>

0800013c <NumberOne>:

	NumberOne:
	ldr r4, =[0x42]
 800013c:	4c20      	ldr	r4, [pc, #128]	; (80001c0 <ResetDigit+0x4e>)
	b toLedsOn
 800013e:	e00f      	b.n	8000160 <toLedsOn>

08000140 <NumberTwo>:

	NumberTwo:
	ldr r4, =[0x2C5]
 8000140:	4c20      	ldr	r4, [pc, #128]	; (80001c4 <ResetDigit+0x52>)
	b toLedsOn
 8000142:	e00d      	b.n	8000160 <toLedsOn>

08000144 <NumberThree>:

	NumberThree:
	ldr r4, =[0x2C3]
 8000144:	4c20      	ldr	r4, [pc, #128]	; (80001c8 <ResetDigit+0x56>)
	b toLedsOn
 8000146:	e00b      	b.n	8000160 <toLedsOn>

08000148 <NumberFour>:

	NumberFour:
	ldr r4, =[0x342]
 8000148:	4c20      	ldr	r4, [pc, #128]	; (80001cc <ResetDigit+0x5a>)
	b toLedsOn
 800014a:	e009      	b.n	8000160 <toLedsOn>

0800014c <NumberFive>:

	NumberFive:
	ldr r4, =[0x383]
 800014c:	4c20      	ldr	r4, [pc, #128]	; (80001d0 <ResetDigit+0x5e>)
	b toLedsOn
 800014e:	e007      	b.n	8000160 <toLedsOn>

08000150 <NumberSix>:

	NumberSix:
	ldr r4, =[0x387]
 8000150:	4c20      	ldr	r4, [pc, #128]	; (80001d4 <ResetDigit+0x62>)
	b toLedsOn
 8000152:	e005      	b.n	8000160 <toLedsOn>

08000154 <NumberSeven>:

	NumberSeven:
	ldr r4, =[0xC2]
 8000154:	4c20      	ldr	r4, [pc, #128]	; (80001d8 <ResetDigit+0x66>)
	b toLedsOn
 8000156:	e003      	b.n	8000160 <toLedsOn>

08000158 <NumberEight>:

	NumberEight:
	ldr r4, =[0x3C7]
 8000158:	4c20      	ldr	r4, [pc, #128]	; (80001dc <ResetDigit+0x6a>)
	b toLedsOn
 800015a:	e001      	b.n	8000160 <toLedsOn>

0800015c <NumberNine>:

	NumberNine:
	ldr r4, =[0x3C3]
 800015c:	4c20      	ldr	r4, [pc, #128]	; (80001e0 <ResetDigit+0x6e>)
	b toLedsOn
 800015e:	e7ff      	b.n	8000160 <toLedsOn>

08000160 <toLedsOn>:

	toLedsOn:
	bl LedsOn
 8000160:	f000 f801 	bl	8000166 <LedsOn>
	pop {pc}
 8000164:	bd00      	pop	{pc}

08000166 <LedsOn>:

/*-----------------------------------------*/

	LedsOn:
	push {lr}
 8000166:	b500      	push	{lr}
	ldr r6, =GPIOB_ODR
 8000168:	4e1e      	ldr	r6, [pc, #120]	; (80001e4 <ResetDigit+0x72>)
	ldr r5, [r6]
 800016a:	6835      	ldr	r5, [r6, #0]
	orrs r5, r5, r4
 800016c:	4325      	orrs	r5, r4
	str r5, [r6]
 800016e:	6035      	str	r5, [r6, #0]
	pop {pc}
 8000170:	bd00      	pop	{pc}

08000172 <ResetDigit>:

/*-----------------------------------------*/

	ResetDigit:
	ldr r6, =GPIOB_ODR
 8000172:	4e1c      	ldr	r6, [pc, #112]	; (80001e4 <ResetDigit+0x72>)
	ldr r5, [r6]
 8000174:	6835      	ldr	r5, [r6, #0]
	ldr r4, =[0xFF7]
 8000176:	4c1c      	ldr	r4, [pc, #112]	; (80001e8 <ResetDigit+0x76>)
	bics r5, r5, r4
 8000178:	43a5      	bics	r5, r4
	str r5, [r6]
 800017a:	6035      	str	r5, [r6, #0]
	bx lr
 800017c:	4770      	bx	lr

/*-----------------------------------------*/

	// this should never get executed
	nop
 800017e:	46c0      	nop			; (mov r8, r8)
	ldr r0, =_estack
 8000180:	20002000 	.word	0x20002000
	ldr r0, =_sdata
 8000184:	20000000 	.word	0x20000000
	ldr r1, =_edata
 8000188:	20000000 	.word	0x20000000
	ldr r2, =_sidata
 800018c:	0800020c 	.word	0x0800020c
	ldr r2, =_sbss
 8000190:	20000000 	.word	0x20000000
	ldr r4, =_ebss
 8000194:	2000001c 	.word	0x2000001c
	ldr r6, =RCC_IOPENR
 8000198:	40021034 	.word	0x40021034
	ldr r6, =GPIOA_MODER
 800019c:	50000000 	.word	0x50000000
	ldr r4, =[0x7FD50000] //All PA pins used define output
 80001a0:	7fd50000 	.word	0x7fd50000
	ldr r6, =GPIOB_MODER
 80001a4:	50000400 	.word	0x50000400
	ldr r4, =[0x55055] //PB5 pin define input, others used pins define output
 80001a8:	00055055 	.word	0x00055055
	ldr r6, =GPIOA_ODR
 80001ac:	50000014 	.word	0x50000014
	ldr r4, =[0x0700]
 80001b0:	00000700 	.word	0x00000700
	ldr r6, = GPIOB_IDR
 80001b4:	50000410 	.word	0x50000410
	ldr r1, =delayInterval
 80001b8:	00186a00 	.word	0x00186a00
	ldr r4, =[0x1C7]
 80001bc:	000001c7 	.word	0x000001c7
	ldr r4, =[0x42]
 80001c0:	00000042 	.word	0x00000042
	ldr r4, =[0x2C5]
 80001c4:	000002c5 	.word	0x000002c5
	ldr r4, =[0x2C3]
 80001c8:	000002c3 	.word	0x000002c3
	ldr r4, =[0x342]
 80001cc:	00000342 	.word	0x00000342
	ldr r4, =[0x383]
 80001d0:	00000383 	.word	0x00000383
	ldr r4, =[0x387]
 80001d4:	00000387 	.word	0x00000387
	ldr r4, =[0xC2]
 80001d8:	000000c2 	.word	0x000000c2
	ldr r4, =[0x3C7]
 80001dc:	000003c7 	.word	0x000003c7
	ldr r4, =[0x3C3]
 80001e0:	000003c3 	.word	0x000003c3
	ldr r6, =GPIOB_ODR
 80001e4:	50000414 	.word	0x50000414
	ldr r4, =[0xFF7]
 80001e8:	00000ff7 	.word	0x00000ff7

080001ec <_init>:
 80001ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001ee:	46c0      	nop			; (mov r8, r8)
 80001f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80001f2:	bc08      	pop	{r3}
 80001f4:	469e      	mov	lr, r3
 80001f6:	4770      	bx	lr

080001f8 <_fini>:
 80001f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001fa:	46c0      	nop			; (mov r8, r8)
 80001fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80001fe:	bc08      	pop	{r3}
 8000200:	469e      	mov	lr, r3
 8000202:	4770      	bx	lr
