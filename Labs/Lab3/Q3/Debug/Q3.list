
Q3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000280  08000288  00010288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000280  08000280  00010280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000284  08000284  00010284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  08000288  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000001c  08000288  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00010288  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000e44  00000000  00000000  000102b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000003f7  00000000  00000000  000110f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000001ac  00000000  00000000  000114eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000000e0  00000000  00000000  00011698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000128  00000000  00000000  00011778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00000a6e  00000000  00000000  000118a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0000066f  00000000  00000000  0001230e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0001297d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000174  00000000  00000000  000129d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000268 	.word	0x08000268

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	08000268 	.word	0x08000268

08000104 <EXTI2_3_IRQHandler>:
    }
}

void EXTI2_3_IRQHandler(int mode){
	//If code at the last mode, change to first mode
	GPIOB->ODR |= (1U << 9);
 8000104:	2380      	movs	r3, #128	; 0x80
 8000106:	4a05      	ldr	r2, [pc, #20]	; (800011c <EXTI2_3_IRQHandler+0x18>)
 8000108:	009b      	lsls	r3, r3, #2
 800010a:	6951      	ldr	r1, [r2, #20]
 800010c:	430b      	orrs	r3, r1
	if(mode == 5)
		mode = 0;
	else
		mode ++; //Change mode
	EXTI->RPR1 |= (1U << 3);
 800010e:	2108      	movs	r1, #8
	GPIOB->ODR |= (1U << 9);
 8000110:	6153      	str	r3, [r2, #20]
	EXTI->RPR1 |= (1U << 3);
 8000112:	4a03      	ldr	r2, [pc, #12]	; (8000120 <EXTI2_3_IRQHandler+0x1c>)
 8000114:	68d3      	ldr	r3, [r2, #12]
 8000116:	430b      	orrs	r3, r1
 8000118:	60d3      	str	r3, [r2, #12]
}
 800011a:	4770      	bx	lr
 800011c:	50000400 	.word	0x50000400
 8000120:	40021800 	.word	0x40021800

08000124 <noToggleLedOff>:

void noToggleLedOff(){
	GPIOB->ODR &= ~(1U << 7);
 8000124:	2180      	movs	r1, #128	; 0x80
 8000126:	4a02      	ldr	r2, [pc, #8]	; (8000130 <noToggleLedOff+0xc>)
 8000128:	6953      	ldr	r3, [r2, #20]
 800012a:	438b      	bics	r3, r1
 800012c:	6153      	str	r3, [r2, #20]
}
 800012e:	4770      	bx	lr
 8000130:	50000400 	.word	0x50000400

08000134 <main>:
    RCC->IOPENR |= (1U << 1);
 8000134:	2102      	movs	r1, #2
int main(void) {
 8000136:	b570      	push	{r4, r5, r6, lr}
    EXTI->IMR1 |= (1U << 3); //Mask for PB3
 8000138:	2508      	movs	r5, #8
    RCC->IOPENR |= (1U << 1);
 800013a:	4a19      	ldr	r2, [pc, #100]	; (80001a0 <main+0x6c>)
    GPIOB->MODER &= 0xFFF55515;
 800013c:	4c19      	ldr	r4, [pc, #100]	; (80001a4 <main+0x70>)
    RCC->IOPENR |= (1U << 1);
 800013e:	6b53      	ldr	r3, [r2, #52]	; 0x34
	GPIOB->ODR &= ~(1U << 7);
	delay(160000);
}

void display0mode(){
	GPIOB->ODR &= 0x0000;
 8000140:	2600      	movs	r6, #0
    RCC->IOPENR |= (1U << 1);
 8000142:	430b      	orrs	r3, r1
 8000144:	6353      	str	r3, [r2, #52]	; 0x34
    GPIOB->MODER &= 0xFFF55515;
 8000146:	6823      	ldr	r3, [r4, #0]
 8000148:	4a17      	ldr	r2, [pc, #92]	; (80001a8 <main+0x74>)
    GPIOB->PUPDR |= (2U << 2*3);
 800014a:	317e      	adds	r1, #126	; 0x7e
    GPIOB->MODER &= 0xFFF55515;
 800014c:	4013      	ands	r3, r2
 800014e:	6023      	str	r3, [r4, #0]
    GPIOB->PUPDR |= (2U << 2*3);
 8000150:	68e3      	ldr	r3, [r4, #12]
 8000152:	430b      	orrs	r3, r1
 8000154:	60e3      	str	r3, [r4, #12]
    EXTI->IMR1 |= (1U << 3); //Mask for PB3
 8000156:	4b15      	ldr	r3, [pc, #84]	; (80001ac <main+0x78>)
 8000158:	5858      	ldr	r0, [r3, r1]
 800015a:	4328      	orrs	r0, r5
 800015c:	5058      	str	r0, [r3, r1]
    EXTI->RTSR1 |= (1U << 3); //Rising Edge PB3
 800015e:	681a      	ldr	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000160:	4813      	ldr	r0, [pc, #76]	; (80001b0 <main+0x7c>)
 8000162:	432a      	orrs	r2, r5
 8000164:	601a      	str	r2, [r3, #0]
    EXTI->EXTICR[0] |= (1U << 8*3); //PB3 0 Mux
 8000166:	2280      	movs	r2, #128	; 0x80
 8000168:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800016a:	0452      	lsls	r2, r2, #17
 800016c:	430a      	orrs	r2, r1
 800016e:	21c1      	movs	r1, #193	; 0xc1
 8000170:	661a      	str	r2, [r3, #96]	; 0x60
 8000172:	4b10      	ldr	r3, [pc, #64]	; (80001b4 <main+0x80>)
 8000174:	0089      	lsls	r1, r1, #2
 8000176:	585a      	ldr	r2, [r3, r1]
	GPIOB->ODR |= 0x0137;
 8000178:	2538      	movs	r5, #56	; 0x38
 800017a:	4002      	ands	r2, r0
 800017c:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800017e:	2240      	movs	r2, #64	; 0x40
 8000180:	35ff      	adds	r5, #255	; 0xff
 8000182:	601a      	str	r2, [r3, #0]
	GPIOB->ODR &= 0x0000;
 8000184:	6963      	ldr	r3, [r4, #20]
 8000186:	6166      	str	r6, [r4, #20]
	GPIOB->ODR |= 0x0137;
 8000188:	6963      	ldr	r3, [r4, #20]
    		    noToggleLedOff(mode); //Set mode
 800018a:	2000      	movs	r0, #0
	GPIOB->ODR |= 0x0137;
 800018c:	432b      	orrs	r3, r5
 800018e:	6163      	str	r3, [r4, #20]
    		    noToggleLedOff(mode); //Set mode
 8000190:	f7ff ffc8 	bl	8000124 <noToggleLedOff>
    	delay(600000); //Delay for getting hand back from button
 8000194:	4b08      	ldr	r3, [pc, #32]	; (80001b8 <main+0x84>)
	GPIOB->ODR &= 0x0000;
	GPIOB->ODR |= 0x0165;
}

void delay(volatile uint32_t s) {
    for(; s>0; s--);
 8000196:	3b01      	subs	r3, #1
 8000198:	2b00      	cmp	r3, #0
 800019a:	d1fc      	bne.n	8000196 <main+0x62>
 800019c:	e7f2      	b.n	8000184 <main+0x50>
 800019e:	46c0      	nop			; (mov r8, r8)
 80001a0:	40021000 	.word	0x40021000
 80001a4:	50000400 	.word	0x50000400
 80001a8:	fff55515 	.word	0xfff55515
 80001ac:	40021800 	.word	0x40021800
 80001b0:	ff00ffff 	.word	0xff00ffff
 80001b4:	e000e100 	.word	0xe000e100
 80001b8:	000927c0 	.word	0x000927c0

080001bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001bc:	480d      	ldr	r0, [pc, #52]	; (80001f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001be:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001c0:	f000 f826 	bl	8000210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001c4:	480c      	ldr	r0, [pc, #48]	; (80001f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80001c6:	490d      	ldr	r1, [pc, #52]	; (80001fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80001c8:	4a0d      	ldr	r2, [pc, #52]	; (8000200 <LoopForever+0xe>)
  movs r3, #0
 80001ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001cc:	e002      	b.n	80001d4 <LoopCopyDataInit>

080001ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001d2:	3304      	adds	r3, #4

080001d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001d8:	d3f9      	bcc.n	80001ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001da:	4a0a      	ldr	r2, [pc, #40]	; (8000204 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001dc:	4c0a      	ldr	r4, [pc, #40]	; (8000208 <LoopForever+0x16>)
  movs r3, #0
 80001de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001e0:	e001      	b.n	80001e6 <LoopFillZerobss>

080001e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001e4:	3204      	adds	r2, #4

080001e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001e8:	d3fb      	bcc.n	80001e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001ea:	f000 f819 	bl	8000220 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001ee:	f7ff ffa1 	bl	8000134 <main>

080001f2 <LoopForever>:

LoopForever:
    b LoopForever
 80001f2:	e7fe      	b.n	80001f2 <LoopForever>
  ldr   r0, =_estack
 80001f4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80001f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000200:	08000288 	.word	0x08000288
  ldr r2, =_sbss
 8000204:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000208:	2000001c 	.word	0x2000001c

0800020c <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800020c:	e7fe      	b.n	800020c <ADC_COMP_IRQHandler>
	...

08000210 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000210:	2280      	movs	r2, #128	; 0x80
 8000212:	4b02      	ldr	r3, [pc, #8]	; (800021c <SystemInit+0xc>)
 8000214:	0512      	lsls	r2, r2, #20
 8000216:	609a      	str	r2, [r3, #8]
#endif
}
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)
 800021c:	e000ed00 	.word	0xe000ed00

08000220 <__libc_init_array>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2600      	movs	r6, #0
 8000224:	4d0c      	ldr	r5, [pc, #48]	; (8000258 <__libc_init_array+0x38>)
 8000226:	4c0d      	ldr	r4, [pc, #52]	; (800025c <__libc_init_array+0x3c>)
 8000228:	1b64      	subs	r4, r4, r5
 800022a:	10a4      	asrs	r4, r4, #2
 800022c:	42a6      	cmp	r6, r4
 800022e:	d109      	bne.n	8000244 <__libc_init_array+0x24>
 8000230:	2600      	movs	r6, #0
 8000232:	f000 f819 	bl	8000268 <_init>
 8000236:	4d0a      	ldr	r5, [pc, #40]	; (8000260 <__libc_init_array+0x40>)
 8000238:	4c0a      	ldr	r4, [pc, #40]	; (8000264 <__libc_init_array+0x44>)
 800023a:	1b64      	subs	r4, r4, r5
 800023c:	10a4      	asrs	r4, r4, #2
 800023e:	42a6      	cmp	r6, r4
 8000240:	d105      	bne.n	800024e <__libc_init_array+0x2e>
 8000242:	bd70      	pop	{r4, r5, r6, pc}
 8000244:	00b3      	lsls	r3, r6, #2
 8000246:	58eb      	ldr	r3, [r5, r3]
 8000248:	4798      	blx	r3
 800024a:	3601      	adds	r6, #1
 800024c:	e7ee      	b.n	800022c <__libc_init_array+0xc>
 800024e:	00b3      	lsls	r3, r6, #2
 8000250:	58eb      	ldr	r3, [r5, r3]
 8000252:	4798      	blx	r3
 8000254:	3601      	adds	r6, #1
 8000256:	e7f2      	b.n	800023e <__libc_init_array+0x1e>
 8000258:	08000280 	.word	0x08000280
 800025c:	08000280 	.word	0x08000280
 8000260:	08000280 	.word	0x08000280
 8000264:	08000284 	.word	0x08000284

08000268 <_init>:
 8000268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800026e:	bc08      	pop	{r3}
 8000270:	469e      	mov	lr, r3
 8000272:	4770      	bx	lr

08000274 <_fini>:
 8000274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800027a:	bc08      	pop	{r3}
 800027c:	469e      	mov	lr, r3
 800027e:	4770      	bx	lr
